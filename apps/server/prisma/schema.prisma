// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  password         String
  role             Role      @default(ATTENDEE)
  referralCode     String?   @unique
  usedReferralCode String?
  pointsEarned     Int       @default(0)
  pointsRedeemed   Int       @default(0)
  pointsExpiry     DateTime?
  balance          Float     @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  events      Event[]       @relation("OrganizerEvents")
  promotions  Promotion[]
  referrals   Referral[]    @relation("ReferralOwner") // Referral codes owned by this user
  referredBy  Referral?     @relation("ReferredUser", fields: [referralId], references: [id])
  tickets     Ticket[]
  review      Review[]
  transaction Transaction[]
  authUser    AuthUser[]
  referralId  String?
}

enum Role {
  ATTENDEE
  ORGANIZER
  ADMIN
}

model AuthUser {
  id       String @id @default(uuid())
  userId   String
  authUUID String

  // Relations
  user User @relation(fields: [userId], references: [id])
}

model Event {
  id              String   @id @default(uuid())
  name            String
  description     String
  genre           Genre
  date            DateTime
  location        String
  price           Float
  availableTicket Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  mainImage        String @default("event-default.jpg")
  additionalImages Json   @default("[]")

  // Relations
  organizerId String
  organizer   User          @relation("OrganizerEvents", fields: [organizerId], references: [id])
  tickets     Ticket[]
  reviews     Review[]
  promotions  Promotion[]
  merchandise Merchandise[]
}

enum Genre {
  ELECTRONIC
  INDIE
  JAZZ
  ROCK
  POP
  HIPHOP
}

model Ticket {
  id       String     @id @default(uuid())
  type     TicketType @default(GENERAL_ADMISSION)
  price    Float
  issuedAt DateTime   @default(now())
  redeemed Boolean    @default(false)

  // Relations
  eventId       String
  event         Event        @relation(fields: [eventId], references: [id])
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  transactionId String?
  transaction   Transaction? @relation(fields: [transactionId], references: [id]) // Optional relation to a transaction
}

enum TicketType {
  GENERAL_ADMISSION
  VIP
  EARLY_BIRD
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])
}

model Referral {
  id   String @id @default(uuid())
  code String @unique // The referral code

  userId String
  user   User   @relation("ReferralOwner", fields: [userId], references: [id])

  referredUser User[] @relation("ReferredUser")
}

model Promotion {
  id              String   @id @default(uuid())
  code            String   @unique
  discount        Float
  validFrom       DateTime
  validUntil      DateTime
  usageCount      Int      @default(0)
  isEventSpecific Boolean  @default(false)

  // Relations
  eventId     String?
  event       Event?        @relation(fields: [eventId], references: [id])
  userId      String?
  user        User?         @relation(fields: [userId], references: [id])
  Transaction Transaction[]
}

model Merchandise {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  createdAt   DateTime @default(now())

  // Relations
  eventId     String
  event       Event         @relation(fields: [eventId], references: [id])
  transaction Transaction[]
}

model Transaction {
  id          String      @id @default(uuid())
  amount      Float
  createdAt   DateTime    @default(now())
  
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  tickets     Ticket[]    // Relation for multiple tickets
  merchandiseId String?
  merchandise Merchandise? @relation(fields: [merchandiseId], references: [id])
  promotionId String?
  promotion   Promotion?   @relation(fields: [promotionId], references: [id])
}